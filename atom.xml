<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[Breeze Whisper]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="https://jerome-wang.github.io//"/>
  <updated>2015-08-15T03:09:20.000Z</updated>
  <id>https://jerome-wang.github.io//</id>
  
  <author>
    <name><![CDATA[Jerome Wang]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[$(PWD) or $(shell pwd)]]></title>
    <link href="https://jerome-wang.github.io/2015/08/15/pwd-in-sudo-make/"/>
    <id>https://jerome-wang.github.io/2015/08/15/pwd-in-sudo-make/</id>
    <published>2015-08-15T03:09:20.000Z</published>
    <updated>2015-08-15T03:09:20.000Z</updated>
    <content type="html"><![CDATA[<p>Though working with Makefile for quite a long time, I think I would never get a deeper insight into the fact beneath the “$(PWD)” and “$(shell pwd)” until an interesting problem was met just hours ago. And here is what happened:</p>
<p>I got a Makefile, with some lines like this.<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="constant">TOPDIR</span>=<span class="variable">$(PWD)</span></span><br><span class="line"><span class="constant">CONFIG_FILE</span>=<span class="variable">$(TOPDIR)</span>/config.mk</span><br><span class="line"></span><br><span class="line">include $(CONFIG_FILE)</span><br></pre></td></tr></table></figure></p>
<p>I typed <code>make</code> as usual, it went well. But when I ran <code>sudo make</code>, the result really perplexed me.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo make</span><br><span class="line">Makefile:<span class="number">4</span>: /config.mk: No such file or directory</span><br><span class="line">make: *** No rule to make target `/config.mk<span class="string">'.  Stop.</span></span><br></pre></td></tr></table></figure>
<p>I replaced <code>TOPDIR=$(PWD)</code> with <code>TOPDIR=$(shell pwd)</code>, then it went right again. So I realized that something went wrong with “$(PWD)”, though I was not quite clear about the root reason. So more further experiments were made.</p>
<p>By printing make’s internal datebase using <code>make -p</code>, I found the following lines in the command’s output. So PWD is actually an environment variable used by Makefile, but a internal variable or function of Makefile.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># environment</span></span><br><span class="line">PWD = /Users/jerome/</span><br></pre></td></tr></table></figure></p>
<p>Hmm, the <code>root</code> user doesn’t have a environment variable named <code>PWD</code>. I thought I have got the answer, but it did not take very long to realize that I was wrong.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ sudo <span class="built_in">echo</span> $(PWD)</span><br><span class="line">/Users/jerome/</span><br><span class="line">$ sudo <span class="operator">-s</span></span><br><span class="line">$ <span class="built_in">echo</span> $(PWD)</span><br><span class="line">/Users/jerome</span><br><span class="line">$ <span class="built_in">export</span> | grep -w PWD</span><br><span class="line"><span class="built_in">declare</span> -x PWD=<span class="string">"/Users/jerome/"</span></span><br></pre></td></tr></table></figure>
<p>Yes, as you can see, when we are <code>root</code>, we do have <code>PWD</code> in our environment. Of course, when I ran <code>make</code> as root, but <code>sudo make</code>, it went quit well. So, the <code>sudo</code> must be the ringleader! </p>
<p>So here’s the truth: When we invoke a command via sudo, sudo will fork another process to perform the command. And for some security reasons or of other aspects, not all the environments of the current process will be inheritted. The following example will demonstrate this point:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ printenv | grep PWD</span><br><span class="line">PWD=/Users/jerome</span><br><span class="line">$ sudo printenv | grep PWD</span><br><span class="line">$</span><br></pre></td></tr></table></figure>
<p>By reading the manual of sudo, I found at least 2 methods are avaliable to walk across this issue. Method 1 is using <code>-E</code> option, which I think is the easiest one:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo -E printenv | grep PWD</span><br><span class="line">PWD=/Users/jerome</span><br></pre></td></tr></table></figure>
<p>And method 2 is modifying <code>/etc/sudoers</code>, the config file for sudo. More details could be found by <code>man sudoers</code>.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Though working with Makefile for quite a long time, I think I would never get a deeper insight into the fact beneath the “$(PWD)” and “$(]]>
    </summary>
    
      <category term="Linux" scheme="https://jerome-wang.github.io/tags/Linux/"/>
    
      <category term="Makefile" scheme="https://jerome-wang.github.io/tags/Makefile/"/>
    
      <category term="sudo" scheme="https://jerome-wang.github.io/tags/sudo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Lingering Questions on Bash]]></title>
    <link href="https://jerome-wang.github.io/2015/07/22/bash-todo/"/>
    <id>https://jerome-wang.github.io/2015/07/22/bash-todo/</id>
    <published>2015-07-22T15:16:16.000Z</published>
    <updated>2015-07-22T15:16:16.000Z</updated>
    <content type="html"><![CDATA[<ul>
<li><a href="http://mywiki.wooledge.org/BashFAQ/050" target="_blank" rel="external">Put Commands in Variables NOT Working</a></li>
<li><a href="http://mywiki.wooledge.org/WordSplitting" target="_blank" rel="external">Word Splitting</a></li>
<li><a href="http://tiswww.case.edu/php/chet/bash/bashref.html#SEC39" target="_blank" rel="external">Redirection</a></li>
<li><a href="http://wiki.bash-hackers.org/howto/redirection_tutorial" target="_blank" rel="external">Redirection Hacking</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<ul>
<li><a href="http://mywiki.wooledge.org/BashFAQ/050" target="_blank" rel="external">Put Commands in Variables NOT Working</a></li>
<li>]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="https://jerome-wang.github.io/2015/07/04/hello-world/"/>
    <id>https://jerome-wang.github.io/2015/07/04/hello-world/</id>
    <published>2015-07-04T04:40:55.000Z</published>
    <updated>2015-07-04T04:40:55.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start">Quick Start</h2><h3 id="Create_a_new_post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io]]>
    </summary>
    
  </entry>
  
</feed>