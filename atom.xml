<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[Breeze Whisper]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="https://jerome-wang.github.io//"/>
  <updated>2015-09-05T04:12:28.000Z</updated>
  <id>https://jerome-wang.github.io//</id>
  
  <author>
    <name><![CDATA[Jerome Wang]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[小心bash的hash坑了你]]></title>
    <link href="https://jerome-wang.github.io/2015/08/30/bash-hash/"/>
    <id>https://jerome-wang.github.io/2015/08/30/bash-hash/</id>
    <published>2015-08-30T03:50:08.000Z</published>
    <updated>2015-09-05T04:12:28.000Z</updated>
    <content type="html"><![CDATA[<p>你是否会有这样的需求呢：在Linux/Mac系统下，需要安装同一软件的不同版本，然后通过修改PATH环境变量，使新安装的版本生效？这个时候，可能就要小心了。我就遇到了这样的一个问题。</p>
<h1 id="奇怪的问题">奇怪的问题</h1><p>Mac系统已经自带有Python，然而由于与其他软件的兼容问题，需要同时安装原生的Python。于是：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="variable">$PATH</span></span><br><span class="line">/usr/<span class="built_in">local</span>/bin:/usr/bin:/bin:/usr/sbin:/sbin</span><br><span class="line">$ <span class="built_in">which</span> python</span><br><span class="line">/usr/bin/python</span><br><span class="line">$ brew install python</span><br><span class="line">...</span><br><span class="line">$ <span class="built_in">which</span> python</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/python</span><br></pre></td></tr></table></figure></p>
<p>到这里，原生的Python已经安装完成。新安装的Python的软链接放在/usr/local/bin目录下。此时执行python命令，结果却让我觉的简直是日了狗了。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ python</span><br><span class="line">Python <span class="number">2.7</span>.<span class="number">6</span> (default, Sep  <span class="number">9</span> <span class="number">2014</span>, <span class="number">15</span>:<span class="number">04</span>:<span class="number">36</span>) </span><br><span class="line">[GCC <span class="number">4.2</span>.<span class="number">1</span> Compatible Apple LLVM <span class="number">6.0</span> (clang-<span class="number">600.0</span>.<span class="number">39</span>)] on darwin</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> or <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line">&gt;&gt;&gt; quit()</span><br><span class="line">$</span><br><span class="line">$ /usr/bin/python</span><br><span class="line">Python <span class="number">2.7</span>.<span class="number">6</span> (default, Sep  <span class="number">9</span> <span class="number">2014</span>, <span class="number">15</span>:<span class="number">04</span>:<span class="number">36</span>) </span><br><span class="line">[GCC <span class="number">4.2</span>.<span class="number">1</span> Compatible Apple LLVM <span class="number">6.0</span> (clang-<span class="number">600.0</span>.<span class="number">39</span>)] on darwin</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> or <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line">&gt;&gt;&gt; quit()</span><br><span class="line">$</span><br><span class="line">$ /usr/<span class="built_in">local</span>/bin/python</span><br><span class="line">Python <span class="number">2.7</span>.<span class="number">10</span> (default, Aug <span class="number">30</span> <span class="number">2015</span>, <span class="number">11</span>:<span class="number">33</span>:<span class="number">20</span>) </span><br><span class="line">[GCC <span class="number">4.2</span>.<span class="number">1</span> Compatible Apple LLVM <span class="number">6.1</span>.<span class="number">0</span> (clang-<span class="number">602.0</span>.<span class="number">53</span>)] on darwin</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> or <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line">&gt;&gt;&gt; quit()</span><br></pre></td></tr></table></figure></p>
<p>从上面Python打印的时间戳不难看出，虽然which已经正确的找到了新安装的Python，但是当执行python命令是，实际执行的仍然是旧版的Python。但是此时，如果我再重新开一个Terminal，执行python命令，却可以正确的执行新安装的python命令。</p>
<h1 id="Bash的命令缓存">Bash的命令缓存</h1><p>缓存？经过一番搜索，Bash果然有所谓的命令缓存。查阅Bash的manual，搜索hash关键字，可以得到如下的说明：</p>
<blockquote>
<p>After a command has been split into words, if it results in a simple command and an optional list  of arguments, the following actions are taken.<br>If the command name contains no slashes,  the  shell  attempts  to locate  it.If  there exists a shell function by that name, that function is invoked as described above in FUNCTIONS.  If the  name does  not  match a function, the shell searches for it in the list of shell builtins.  If a match is found, that builtin is  invoked.<br>If  the  name  is neither a shell function nor a builtin, and contains no slashes, bash searches each element of  the  PATH  for  a directory containing an executable file by that name.  <strong><em>Bash uses a hash table to remember the full pathnames of executable files (see hash  under  SHELL  BUILTIN COMMANDS below).  A full search of the directories in PATH is performed only if the command is not  found in the hash table.</em></strong> If  the  search is unsuccessful, the shell prints an error message and returns an exit status of 127.</p>
</blockquote>
<p>根据说明，可以通过内置命令hash来管理相应的hash table：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">hash</span> <span class="operator">-l</span> <span class="comment"># 列出当前的hash table</span></span><br><span class="line"><span class="built_in">builtin</span> <span class="built_in">hash</span> -p /usr/bin/<span class="built_in">which</span> <span class="built_in">which</span></span><br><span class="line"><span class="built_in">builtin</span> <span class="built_in">hash</span> -p /usr/<span class="built_in">local</span>/bin/brew brew</span><br><span class="line"><span class="built_in">builtin</span> <span class="built_in">hash</span> -p /usr/bin/man man</span><br><span class="line"><span class="built_in">builtin</span> <span class="built_in">hash</span> -p /bin/ls ls</span><br><span class="line"><span class="built_in">builtin</span> <span class="built_in">hash</span> -p /usr/bin/python python</span><br><span class="line">$ <span class="built_in">hash</span> <span class="operator">-d</span> python <span class="comment"># 删除hash table中的python条目</span></span><br><span class="line">$ <span class="built_in">hash</span> <span class="operator">-l</span></span><br><span class="line"><span class="built_in">builtin</span> <span class="built_in">hash</span> -p /usr/bin/<span class="built_in">which</span> <span class="built_in">which</span></span><br><span class="line"><span class="built_in">builtin</span> <span class="built_in">hash</span> -p /usr/<span class="built_in">local</span>/bin/brew brew</span><br><span class="line"><span class="built_in">builtin</span> <span class="built_in">hash</span> -p /usr/bin/man man</span><br><span class="line"><span class="built_in">builtin</span> <span class="built_in">hash</span> -p /bin/ls ls</span><br><span class="line">$ python</span><br><span class="line">Python <span class="number">2.7</span>.<span class="number">10</span> (default, Aug <span class="number">30</span> <span class="number">2015</span>, <span class="number">11</span>:<span class="number">33</span>:<span class="number">20</span>) </span><br><span class="line">[GCC <span class="number">4.2</span>.<span class="number">1</span> Compatible Apple LLVM <span class="number">6.1</span>.<span class="number">0</span> (clang-<span class="number">602.0</span>.<span class="number">53</span>)] on darwin</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> or <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line">&gt;&gt;&gt; quit()</span><br></pre></td></tr></table></figure></p>
<p>除了上面的-l和-d参数，还有-r参数。该参数用于删除当前hash table中的所有条目。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">hash</span> -r</span><br><span class="line">$ <span class="built_in">hash</span> <span class="operator">-l</span></span><br><span class="line"><span class="built_in">hash</span>: <span class="built_in">hash</span> table empty</span><br></pre></td></tr></table></figure></p>
<h1 id="总结">总结</h1><p>在安装了新软件同时系统中有旧版本的软件共存时，记得执行<code>hash -r</code>来让新安装的软件生效。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>你是否会有这样的需求呢：在Linux/Mac系统下，需要安装同一软件的不同版本，然后通过修改PATH环境变量，使新安装的版本生效？这个时候，可能就要小心了。我就遇到了这样的一个问题。</p>
<h1 id="奇怪的问题">奇怪的问题</h1><p>Mac系统已经自带有Pyt]]>
    </summary>
    
      <category term="Bash" scheme="https://jerome-wang.github.io/tags/Bash/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[$(PWD) or $(shell pwd)]]></title>
    <link href="https://jerome-wang.github.io/2015/08/13/pwd-in-sudo-make/"/>
    <id>https://jerome-wang.github.io/2015/08/13/pwd-in-sudo-make/</id>
    <published>2015-08-13T15:00:00.000Z</published>
    <updated>2015-08-18T13:00:37.000Z</updated>
    <content type="html"><![CDATA[<p>Though working with Makefile for quite a long time, I think I would never get a deeper insight into the fact beneath the “$(PWD)” and “$(shell pwd)” until an interesting problem was met just hours ago. And here is what happened:</p>
<h2 id="Different_behavors_in_make_and_sudo_make">Different behavors in <code>make</code> and <code>sudo make</code></h2><p>I got a Makefile, with some lines like this.<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="constant">TOPDIR</span>=<span class="variable">$(PWD)</span></span><br><span class="line"><span class="constant">CONFIG_FILE</span>=<span class="variable">$(TOPDIR)</span>/config.mk</span><br><span class="line"></span><br><span class="line">include $(CONFIG_FILE)</span><br></pre></td></tr></table></figure></p>
<p>I typed <code>make</code> as usual, it went well. But when I ran <code>sudo make</code>, the result really perplexed me.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo make</span><br><span class="line">Makefile:<span class="number">4</span>: /config.mk: No such file or directory</span><br><span class="line">make: *** No rule to make target `/config.mk<span class="string">'.  Stop.</span></span><br></pre></td></tr></table></figure>
<p>I replaced <code>TOPDIR=$(PWD)</code> with <code>TOPDIR=$(shell pwd)</code>, then it went right again. So I realized that something went wrong with “$(PWD)”, though I was not quite clear about the root reason. So more further experiments were made.</p>
<h2 id="PWD,_from_shell_environment"><code>PWD</code>, from shell environment</h2><p>By printing make’s internal datebase using <code>make -p</code>, I found the following lines in the command’s output. So PWD is actually an environment variable used by Makefile, but a internal variable or function of Makefile.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># environment</span></span><br><span class="line">PWD = /Users/jerome/</span><br></pre></td></tr></table></figure></p>
<p>Hmm, the <code>root</code> user doesn’t have a environment variable named <code>PWD</code>. I thought I have got the answer, but it did not take very long to realize that I was wrong.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ sudo <span class="built_in">echo</span> $(PWD)</span><br><span class="line">/Users/jerome/</span><br><span class="line">$ sudo <span class="operator">-s</span></span><br><span class="line">$ <span class="built_in">echo</span> $(PWD)</span><br><span class="line">/Users/jerome</span><br><span class="line">$ <span class="built_in">export</span> | grep -w PWD</span><br><span class="line"><span class="built_in">declare</span> -x PWD=<span class="string">"/Users/jerome/"</span></span><br></pre></td></tr></table></figure>
<h2 id="A_clean_environment_for_sudo‘s_child_process">A clean environment for <code>sudo</code>‘s child process</h2><p>Yes, as you can see, when we are <code>root</code>, we do have <code>PWD</code> in our environment. Of course, when I ran <code>make</code> as root, but <code>sudo make</code>, it went quit well. So, the <code>sudo</code> must be the ringleader! </p>
<p>So here’s the truth: When we invoke a command via sudo, sudo will fork another process to perform the command. And for some security reasons or of other aspects, not all the environments of the current process will be inheritted. The following example will demonstrate this point:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ printenv | grep PWD</span><br><span class="line">PWD=/Users/jerome</span><br><span class="line">$ sudo printenv | grep PWD</span><br><span class="line">$</span><br></pre></td></tr></table></figure>
<h2 id="Working_across">Working across</h2><p>By reading the manual of sudo, I found at least 2 methods are avaliable to walk across this issue. Method 1 is using <code>-E</code> option, which I think is the easiest one:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo -E printenv | grep PWD</span><br><span class="line">PWD=/Users/jerome</span><br></pre></td></tr></table></figure>
<p>And method 2 is modifying <code>/etc/sudoers</code>, the config file for sudo. More details could be found by <code>man sudoers</code>.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Though working with Makefile for quite a long time, I think I would never get a deeper insight into the fact beneath the “$(PWD)” and “$(]]>
    </summary>
    
      <category term="Linux" scheme="https://jerome-wang.github.io/tags/Linux/"/>
    
      <category term="Makefile" scheme="https://jerome-wang.github.io/tags/Makefile/"/>
    
      <category term="sudo" scheme="https://jerome-wang.github.io/tags/sudo/"/>
    
      <category term="default" scheme="https://jerome-wang.github.io/categories/default/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Lingering Questions on Bash]]></title>
    <link href="https://jerome-wang.github.io/2015/07/22/bash-todo/"/>
    <id>https://jerome-wang.github.io/2015/07/22/bash-todo/</id>
    <published>2015-07-22T13:00:00.000Z</published>
    <updated>2015-08-18T13:00:37.000Z</updated>
    <content type="html"><![CDATA[<ul>
<li><a href="http://mywiki.wooledge.org/BashFAQ/050" target="_blank" rel="external">Put Commands in Variables NOT Working</a></li>
<li><a href="http://mywiki.wooledge.org/WordSplitting" target="_blank" rel="external">Word Splitting</a></li>
<li><a href="http://tiswww.case.edu/php/chet/bash/bashref.html#SEC39" target="_blank" rel="external">Redirection</a></li>
<li><a href="http://wiki.bash-hackers.org/howto/redirection_tutorial" target="_blank" rel="external">Redirection Hacking</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<ul>
<li><a href="http://mywiki.wooledge.org/BashFAQ/050" target="_blank" rel="external">Put Commands in Variables NOT Working</a></li>
<li>]]>
    </summary>
    
      <category term="Bash" scheme="https://jerome-wang.github.io/tags/Bash/"/>
    
      <category term="Linux" scheme="https://jerome-wang.github.io/tags/Linux/"/>
    
      <category term="default" scheme="https://jerome-wang.github.io/categories/default/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="https://jerome-wang.github.io/2015/07/04/hello-world/"/>
    <id>https://jerome-wang.github.io/2015/07/04/hello-world/</id>
    <published>2015-07-04T04:40:55.000Z</published>
    <updated>2015-07-04T04:40:55.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start">Quick Start</h2><h3 id="Create_a_new_post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io]]>
    </summary>
    
  </entry>
  
</feed>